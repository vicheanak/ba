{"version":3,"file":"slide-toggle.js","sourceRoot":"","sources":["../../Users/jelbourn/material2/tmp/broccoli_type_script_compiler-input_base_path-lnaCBdnQ.tmp/0/src/demo-app/components/slide-toggle/slide-toggle.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  Component,\r\n  ElementRef,\r\n  Renderer,\r\n  forwardRef,\r\n  ChangeDetectionStrategy,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  AfterContentInit\r\n} from '@angular/core';\r\nimport {\r\n  ControlValueAccessor,\r\n  NG_VALUE_ACCESSOR\r\n} from '@angular/forms';\r\nimport { BooleanFieldValue } from '@angular2-material/core/annotations/field-value';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nexport const MD_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MdSlideToggle),\r\n  multi: true\r\n};\r\n\r\n// A simple change event emitted by the MdSlideToggle component.\r\nexport class MdSlideToggleChange {\r\n  source: MdSlideToggle;\r\n  checked: boolean;\r\n}\r\n\r\n// Increasing integer for generating unique ids for slide-toggle components.\r\nlet nextId = 0;\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'md-slide-toggle',\r\n  host: {\r\n    '[class.md-checked]': 'checked',\r\n    '[class.md-disabled]': 'disabled',\r\n    // This md-slide-toggle prefix will change, once the temporary ripple is removed.\r\n    '[class.md-slide-toggle-focused]': '_hasFocus',\r\n    '(mousedown)': 'setMousedown()'\r\n  },\r\n  templateUrl: 'slide-toggle.html',\r\n  styleUrls: ['slide-toggle.css'],\r\n  providers: [MD_SLIDE_TOGGLE_VALUE_ACCESSOR],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MdSlideToggle implements AfterContentInit, ControlValueAccessor {\r\n\r\n  private onChange = (_: any) => {};\r\n  private onTouched = () => {};\r\n\r\n  // A unique id for the slide-toggle. By default the id is auto-generated.\r\n  private _uniqueId = `md-slide-toggle-${++nextId}`;\r\n  private _checked: boolean = false;\r\n  private _color: string;\r\n  private _hasFocus: boolean = false;\r\n  private _isMousedown: boolean = false;\r\n  private _isInitialized: boolean = false;\r\n\r\n  @Input() @BooleanFieldValue() disabled: boolean = false;\r\n  @Input() name: string = null;\r\n  @Input() id: string = this._uniqueId;\r\n  @Input() tabIndex: number = 0;\r\n  @Input() ariaLabel: string = null;\r\n  @Input() ariaLabelledby: string = null;\r\n\r\n  private _change: EventEmitter<MdSlideToggleChange> = new EventEmitter<MdSlideToggleChange>();\r\n  @Output() change: Observable<MdSlideToggleChange> = this._change.asObservable();\r\n\r\n  // Returns the unique id for the visual hidden input.\r\n  getInputId = () => `${this.id || this._uniqueId}-input`;\r\n\r\n  constructor(private _elementRef: ElementRef,\r\n              private _renderer: Renderer) {\r\n  }\r\n\r\n  /** TODO: internal */\r\n  ngAfterContentInit() {\r\n    // Mark this component as initialized in AfterContentInit because the initial checked value can\r\n    // possibly be set by NgModel or the checked attribute. This would cause the change event to\r\n    // be emitted, before the component is actually initialized.\r\n    this._isInitialized = true;\r\n  }\r\n\r\n  /**\r\n   * The onChangeEvent method will be also called on click.\r\n   * This is because everything for the slide-toggle is wrapped inside of a label,\r\n   * which triggers a onChange event on click.\r\n   * @internal\r\n   */\r\n  onChangeEvent(event: Event) {\r\n    // We always have to stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    // emit its event object to the component's `change` output.\r\n    event.stopPropagation();\r\n\r\n    if (!this.disabled) {\r\n      this.toggle();\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  onInputClick(event: Event) {\r\n    this.onTouched();\r\n\r\n    // We have to stop propagation for click events on the visual hidden input element.\r\n    // By default, when a user clicks on a label element, a generated click event will be\r\n    // dispatched on the associated input element. Since we are using a label element as our\r\n    // root container, the click event on the `slide-toggle` will be executed twice.\r\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n    // This will lead to multiple click events.\r\n    // Preventing bubbling for the second event will solve that issue.\r\n    event.stopPropagation();\r\n  }\r\n\r\n  /** @internal */\r\n  setMousedown() {\r\n    // We only *show* the focus style when focus has come to the button via the keyboard.\r\n    // The Material Design spec is silent on this topic, and without doing this, the\r\n    // button continues to look :active after clicking.\r\n    // @see http://marcysutton.com/button-focus-hell/\r\n    this._isMousedown = true;\r\n    setTimeout(() => this._isMousedown = false, 100);\r\n  }\r\n\r\n  /** @internal */\r\n  onInputFocus() {\r\n    // Only show the focus / ripple indicator when the focus was not triggered by a mouse\r\n    // interaction on the component.\r\n    if (!this._isMousedown) {\r\n      this._hasFocus = true;\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  onInputBlur() {\r\n    this._hasFocus = false;\r\n    this.onTouched();\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of ControlValueAccessor.\r\n   * TODO: internal\r\n   */\r\n  writeValue(value: any): void {\r\n    this.checked = value;\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of ControlValueAccessor.\r\n   * TODO: internal\r\n   */\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of ControlValueAccessor.\r\n   * TODO: internal\r\n   */\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  @Input()\r\n  get checked() {\r\n    return !!this._checked;\r\n  }\r\n\r\n  set checked(value) {\r\n    if (this.checked !== !!value) {\r\n      this._checked = value;\r\n      this.onChange(this._checked);\r\n\r\n      // Only fire a change event if the `slide-toggle` is completely initialized and\r\n      // all attributes / inputs are properly loaded.\r\n      if (this._isInitialized) {\r\n        this._emitChangeEvent();\r\n      }\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  get color(): string {\r\n    return this._color;\r\n  }\r\n\r\n  set color(value: string) {\r\n    this._updateColor(value);\r\n  }\r\n\r\n  toggle() {\r\n    this.checked = !this.checked;\r\n  }\r\n\r\n  private _updateColor(newColor: string) {\r\n    this._setElementColor(this._color, false);\r\n    this._setElementColor(newColor, true);\r\n    this._color = newColor;\r\n  }\r\n\r\n  private _setElementColor(color: string, isAdd: boolean) {\r\n    if (color != null && color != '') {\r\n      this._renderer.setElementClass(this._elementRef.nativeElement, `md-${color}`, isAdd);\r\n    }\r\n  }\r\n\r\n  private _emitChangeEvent() {\r\n    let event = new MdSlideToggleChange();\r\n    event.source = this;\r\n    event.checked = this.checked;\r\n    this._change.emit(event);\r\n  }\r\n\r\n}\r\n\r\nexport const MD_SLIDE_TOGGLE_DIRECTIVES = [MdSlideToggle];\r\n"]}