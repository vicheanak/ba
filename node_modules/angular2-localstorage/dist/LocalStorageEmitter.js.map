{"version":3,"file":"LocalStorageEmitter.js","sourceRoot":"","sources":["../LocalStorageEmitter.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAoC,eAAe,CAAC,CAAA;AACpD,qBAAqB,eAAe,CAAC,CAAA;AAErC;IAAA;IA6BA,CAAC;IAxBiB,4BAAQ,GAAtB,UAAuB,MAAc;QACjC,IAAI,KAAK,GAAW,mBAAmB,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAChE,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACf,KAAK,GAAG,mBAAmB,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACzD,CAAC;QACD,mBAAmB,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,gBAAgB,CAAC,SAAS,CAAC;YACtE,GAAG,CAAC,CAAiB,UAA+B,EAA/B,KAAA,mBAAmB,CAAC,WAAW,EAA/B,cAA+B,EAA/B,IAA+B,CAAC;gBAAhD,IAAI,QAAQ,SAAA;gBACb,QAAQ,EAAE,CAAC;aACd;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAIa,6BAAS,GAAvB,UAAwB,QAAkB;QACtC,mBAAmB,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACnD,CAAC;IAEa,8BAAU,GAAxB,UAAyB,MAAc;QACnC,IAAI,KAAK,GAAW,mBAAmB,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAChE,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;YACb,mBAAmB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;QACxD,CAAC;IACL,CAAC;IA1BgB,8BAAU,GAAQ,EAAE,CAAC;IACrB,2BAAO,GAAa,EAAE,CAAC;IAcvB,+BAAW,GAAQ,EAAE,CAAC;IAY3C,0BAAC;AAAD,CAAC,AA7BD,IA6BC;AA7BY,2BAAmB,sBA6B/B,CAAA;AAGD;IACI,6BAAoB,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;QAC9B,mBAAmB,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC9C,CAAC;IAED,yCAAW,GAAX;QACI,mBAAmB,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAChD,CAAC;IARL;QAAC,iBAAU,EAAE;;2BAAA;IASb,0BAAC;AAAD,CAAC,AARD,IAQC;AARY,2BAAmB,sBAQ/B,CAAA;AAMD,gCAAuC,UAAsC;IACzE,UAAU,CAAC,IAAI,CAAC,UAAC,GAAG;QAChB,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAO,mBAAmB,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;AACP,CAAC;AAJe,8BAAsB,yBAIrC,CAAA","sourcesContent":["import {Injectable, OnDestroy} from \"@angular/core\";\nimport {NgZone} from \"@angular/core\";\n\nexport class LocalStorageEmitter {\n\n    protected static subscribed: any = [];\n    protected static ngZones: NgZone[] = [];\n\n    public static register(ngZone: NgZone) {\n        let index: number = LocalStorageEmitter.ngZones.indexOf(ngZone);\n        if (index === -1) {\n            index = LocalStorageEmitter.ngZones.push(ngZone) - 1;\n        }\n        LocalStorageEmitter.subscribed[index] = ngZone.onMicrotaskEmpty.subscribe(() => {\n            for (let callback of LocalStorageEmitter.subscribers) {\n                callback();\n            }\n        });\n    }\n\n    protected static subscribers: any = [];\n\n    public static subscribe(callback: Function) {\n        LocalStorageEmitter.subscribers.push(callback);\n    }\n\n    public static unregister(ngZone: NgZone) {\n        let index: number = LocalStorageEmitter.ngZones.indexOf(ngZone);\n        if (index >= 0) {\n            LocalStorageEmitter.subscribed[index].unsubscribe();\n        }\n    }\n}\n\n@Injectable()\nexport class LocalStorageService implements OnDestroy {\n    constructor(private ngZone: NgZone) {\n        LocalStorageEmitter.register(this.ngZone);\n    }\n\n    ngOnDestroy() {\n        LocalStorageEmitter.unregister(this.ngZone);\n    }\n}\n\nimport {Type} from \"@angular/core/src/facade/lang\";\nimport {provide} from \"@angular/core/src/di\";\nimport {ComponentRef} from \"@angular/core\";\n\nexport function LocalStorageSubscriber(appPromise: Promise<ComponentRef<any>>) {\n    appPromise.then((bla) => {\n        bla.injector.get(<Type>LocalStorageService);\n    });\n}\n"]}